// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SquareClient is the client API for Square service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SquareClient interface {
	GetSquare(ctx context.Context, in *GetSquareRequest, opts ...grpc.CallOption) (*GetSquareResponse, error)
}

type squareClient struct {
	cc grpc.ClientConnInterface
}

func NewSquareClient(cc grpc.ClientConnInterface) SquareClient {
	return &squareClient{cc}
}

func (c *squareClient) GetSquare(ctx context.Context, in *GetSquareRequest, opts ...grpc.CallOption) (*GetSquareResponse, error) {
	out := new(GetSquareResponse)
	err := c.cc.Invoke(ctx, "/square.Square/GetSquare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SquareServer is the server API for Square service.
// All implementations must embed UnimplementedSquareServer
// for forward compatibility
type SquareServer interface {
	GetSquare(context.Context, *GetSquareRequest) (*GetSquareResponse, error)
	mustEmbedUnimplementedSquareServer()
}

// UnimplementedSquareServer must be embedded to have forward compatible implementations.
type UnimplementedSquareServer struct {
}

func (UnimplementedSquareServer) GetSquare(context.Context, *GetSquareRequest) (*GetSquareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSquare not implemented")
}
func (UnimplementedSquareServer) mustEmbedUnimplementedSquareServer() {}

// UnsafeSquareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SquareServer will
// result in compilation errors.
type UnsafeSquareServer interface {
	mustEmbedUnimplementedSquareServer()
}

func RegisterSquareServer(s grpc.ServiceRegistrar, srv SquareServer) {
	s.RegisterService(&Square_ServiceDesc, srv)
}

func _Square_GetSquare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSquareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquareServer).GetSquare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/square.Square/GetSquare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquareServer).GetSquare(ctx, req.(*GetSquareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Square_ServiceDesc is the grpc.ServiceDesc for Square service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Square_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "square.Square",
	HandlerType: (*SquareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSquare",
			Handler:    _Square_GetSquare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "square.proto",
}
